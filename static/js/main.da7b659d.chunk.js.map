{"version":3,"sources":["components/RouteComponent.js","App.js","serviceWorker.js","index.js"],"names":["RouteComponent","props","this","selectedTab","React","Component","Error","App","onTabSelect","e","index","location","pathname","indexOf","length","slice","path","match","className","id","role","to","onClick","exact","render","component","Boolean","window","hostname","routes","from","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAceA,E,kDAZX,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,iDACqBC,KAAKD,MAAME,iB,GAPfC,IAAMC,W,sBCI7BC,EAAO,kBAAK,uDA0DHC,E,kDAxDb,WAAYN,GAAO,IAAD,uBAEhB,cAAMA,IAsBRO,YAAa,SAAAC,GACX,EAAKN,YAAcM,GAtBnB,IAAMC,EAAQT,EAAMU,SAASC,SAASC,QAAQ,SAC9C,GAAIH,EAAQ,GAAKT,EAAMU,SAASC,SAASE,OACvC,EAAKX,YAAc,eAEnB,OAAQF,EAAMU,SAASC,SAASG,MAAML,EAAM,IAC1C,IAAK,WACH,EAAKP,YAAc,UACnB,MACF,IAAK,UACH,EAAKA,YAAc,SACnB,MACF,IAAK,WACH,EAAKA,YAAc,UACnB,MACF,IAAK,YACH,EAAKA,YAAc,WAlBT,S,qDA2BT,IAAD,OACCa,EAAQd,KAAKD,MAAMgB,MAAnBD,KACP,OACA,6BAEE,uDACA,yBAAKE,UAAU,eAAeC,GAAG,QAAQC,KAAK,WAC5C,kBAAC,IAAD,CAAMF,UAAW,oBAAqBG,GAAE,UAAKL,EAAL,YAAqBM,QAAS,kBAAI,EAAKd,YAAY,aAA3F,WACA,kBAAC,IAAD,CAAMU,UAAW,oBAAqBG,GAAE,UAAKL,EAAL,WAAoBM,QAAS,kBAAI,EAAKd,YAAY,YAA1F,oBACA,kBAAC,IAAD,CAAMU,UAAW,oBAAqBG,GAAE,UAAKL,EAAL,YAAoBM,QAAS,kBAAI,EAAKd,YAAY,aAA1F,WACA,kBAAC,IAAD,CAAMU,UAAW,oBAAqBG,GAAE,UAAKL,EAAL,aAAqBM,QAAS,kBAAI,EAAKd,YAAY,cAA3F,qBAEF,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAI,UAAKA,GAAQO,OAAK,EAACC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BE,YAAe,EAAKA,kBAChG,kBAAC,IAAD,CAAOa,KAAI,UAAKA,EAAL,YAAqBO,OAAK,EAACC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BE,YAAe,EAAKA,kBACxG,kBAAC,IAAD,CAAOa,KAAI,UAAKA,EAAL,WAAoBO,OAAK,EAACC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BE,YAAe,EAAKA,kBACvG,kBAAC,IAAD,CAAOa,KAAI,UAAKA,EAAL,YAAqBO,OAAK,EAACC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BE,YAAe,EAAKA,kBACxG,kBAAC,IAAD,CAAOa,KAAI,UAAKA,EAAL,aAAsBO,OAAK,EAACC,OAAQ,SAACvB,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BE,YAAe,EAAKA,kBAEzG,kBAAC,IAAD,CAAOsB,UAAWnB,W,GAhDVF,IAAMC,WCMJqB,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASX,MACvB,2DCXN,IAAMY,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOb,KAAK,QAAQS,UAAWlB,IAC/B,kBAAC,IAAD,CAAUuB,KAAK,KAAKT,GAAG,YAI/BU,IAASP,OAAOK,EAAQG,SAASC,eAAe,SDoH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da7b659d.chunk.js","sourcesContent":["import React from 'react';\nclass RouteComponent extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return (\n            <div>\n               You select this: {this.props.selectedTab}\n            </div>\n        )\n    }\n}\n\nexport default RouteComponent;","import React from 'react';\nimport RouteComponent from './components/RouteComponent';\nimport './App.css';\nimport { Link, Switch, Route } from 'react-router-dom';\n\nconst Error =()=> <div>Oops! Page not found!</div>;\nclass App extends React.Component {\n  constructor(props){\n    var selectedTab = \"regular\";\n    super(props);\n    const index = props.location.pathname.indexOf(\"/home\");\n    if (index + 5 >= props.location.pathname.length){\n      this.selectedTab = \"regular\";\n    } else {\n      switch (props.location.pathname.slice(index+5)) {\n        case \"/regular\":\n          this.selectedTab = \"regular\";\n          break;\n        case \"/random\":\n          this.selectedTab = \"random\";\n          break;\n        case \"/stretch\":\n          this.selectedTab = \"stretch\";\n          break;\n        case \"/position\":\n          this.selectedTab = \"position\";\n          break;\n      }\n    }\n  }\n\n  onTabSelect =e =>{\n    this.selectedTab = e\n  }\n  render(){\n    const {path} = this.props.match;\n    return (\n    <div>\n\n      <h1>Welcome to workout plan</h1>\n      <div className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n        <Link className={\"nav-item nav-link\"} to={`${path}/regular`} onClick={()=>this.onTabSelect('regular')}>Regular</Link>\n        <Link className={\"nav-item nav-link\"} to={`${path}/random`} onClick={()=>this.onTabSelect('random')}>Random Generator</Link>\n        <Link className={\"nav-item nav-link\"} to={`${path}/stretch`}onClick={()=>this.onTabSelect('stretch')}>Stretch</Link>\n        <Link className={\"nav-item nav-link\"} to={`${path}/position`}onClick={()=>this.onTabSelect('position')}>Correct position</Link>\n      </div>\n      <div>\n        <Switch>\n          <Route path={`${path}`} exact render={(props) => <RouteComponent {...props} selectedTab = {this.selectedTab}/>}/>\n          <Route path={`${path}/regular`} exact render={(props) => <RouteComponent {...props} selectedTab = {this.selectedTab}/>}/>\n          <Route path={`${path}/random`} exact render={(props) => <RouteComponent {...props} selectedTab = {this.selectedTab}/>}/>\n          <Route path={`${path}/stretch`} exact render={(props) => <RouteComponent {...props} selectedTab = {this.selectedTab}/>}/>\n          <Route path={`${path}/position`} exact render={(props) => <RouteComponent {...props} selectedTab = {this.selectedTab}/>}/>\n\n          <Route component={Error}/>\n\n        </Switch>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nconst routes = (\n  <BrowserRouter>\n    <Switch>\n        <Route path='/home' component={App}/>\n        <Redirect from=\"/*\" to=\"/home\"/>\n    </Switch>\n  </BrowserRouter>)\n\nReactDOM.render(routes, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}